Constructor Functions

1. invoked with the "new" keyword
2. "this" refer to a new object
3. the default return value is "this"

function Employee(id, name, salary){
  if (this.constructor !== arguments.callee)
     return new Employee(id,name,salary);
  this.id = id;
  this.name = name;
  this.salary = salary;
}

Modify the above constructor function to exhibit the following behavior:

1. Convert all the members to accessors with the following validations
	a. id should be readonly
	b. name cannot be assigned an empty string
	c. salary cannot be assigned a value less than the current one


function Employee(id,name,salary){
	var _id = 0, 
		_name = "", 
		_salary = 0;
	this.id = function(val){
		if (typeof val === "undefined") return _id;
	};
	this.name = function(val){
		if (typeof val === "undefined") return _name;
		if (val !== "") _name = val;
	};
	this.salary = function(val){
		if (typeof val === "undefined") return _salary;
		if (_salary < val) _salary = val;
	};
	_id = id;
	this.name(name);
	this.salary(salary);
}

function SalaryCalculator(basic,hra,da,tax){
	this.basic = basic;
	this.hra = hra;
	this.da = da;
	this.tax = tax;
	this.salary = 0;
	
	this.calculate = function(){
		var gross = this.basic + this.hra + this.da ;
		this.salary = ((100-this.tax)/100) * gross
	}
}